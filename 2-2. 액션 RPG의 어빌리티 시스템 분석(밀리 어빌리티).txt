1. Action RPG의 어빌리티 유형은 크게 두 가지, Melee (근접, 밀리)와 Skill (스킬)입니다. 두 어빌리티 다 비슷하지만, 차이가 약간 있습니다.
예를 들어 밀리 어빌리티는 캐릭터의 무기가 적에 겹치면 시전되는 반면, 스킬 어빌리티는 스킬별 라인 트레이스 검사를 사용합니다. 

2. GA_AbilityBase 블루프린트의 OnEndAbility 이벤트는 어빌리티가 끝나면 호출되는 이벤트로 OnAbilityEnded이벤트 디스패처로 연결합니다.

3. ActivateAbility이벤트는 어빌리티 시작 시 호출하며,
CommitAbility함수는 어빌리티의 Cost (비용, ARPG 에서는 보통 마나) 및 Cooldown (재사용 대기시간, 쿨다운)을 적용합니다.
EndAbility함수 는 어빌리티 실행이 끝났음을 시스템에 알리기 위해 호출합니다. 다른 두 노드는 ARPG 전용으로, 보통 게임마다 필요에 따라 새 함수와 노드를 추가합니다.

4. PlayMontageandWaitForEvent(함수)는 AbilityTask노드로, URPGAbilityTask_PlayMontageAndWaitForEvent(어빌리티 태스크 함수)에 해당합니다.
AbilityTasks는 태스크 실행에 사용되는 함수, 변수, 태스크(이 경우 PlayMontageAndWaitForEvent) 생성을 위한 정적 함수 세트를 정의하는 특수 오브젝트입니다.
태스크에서 가동하는 동적(DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams)/블루프린트(?) 델리게이트 세트도 있습니다.
(상단 옆에서 항상 즉시 가동되는) 각 출력 실행 핀은 이 델리게이트 중 하나에 해당하며, 출력 데이터 핀은 델리게이트의 시그너처에 일치합니다.
이 특정 태스크는 UAbilityTask_PlayMontageAndWait 및 UAbilityTask_WaitGameplayEvent의 조합으로, 약간의 게임 전용 트윅(Tweak : 안정성, 효율 등을 위한 변화)과 코멘트를 포함합니다.
게임마다 새 게임플레이 태스크를 다수 구현하게 마련이므로, 이 태스크는 설정 방법에 대한 좋은 예가 됩니다.

5. 이 태스크(PlayMontageandWaitForEvent) 작동 방식은 먼저 몽타주를 재생한 뒤 AbilitySystemComponent 에서 게임플레이 이벤트가 방출(emit)될 때까지 대기(listen)합니다.
 방출된 게임플레이 이벤트가 전달된 EventTags 에 일치하면 태그 및 페이로드와 함께 EventReceived 실행 핀을 가동한 뒤 ApplyEffectContainer 함수를 호출합니다.
몽타주 블렌딩이 끝나거나, 중단 또는 취소되면, 어빌리티가 끝납니다. 실제 게임플레이 이벤트는 WeaponActor 블루프린트에서 방출됩니다.

6. 무기 액터가 캐릭터에 겹칠 때 발동됩니다. 그러면 GameplayEventData 페이로드를 생성하고 Target Actor + Instigator. 에 전달합니다.
그런 다음 몽타주에 배치한 Anim Notify 스테이트로 게임플레이 이벤트를 전송합니다. 즉 그 이벤트가 발동되면, 어빌리티 그래프는 EventReceived 실행 핀을 가동합니다.
ApplyEffectContainer 노드는 URPGGameplayAbility::ApplyEffectContainer 에 해당하며, 게임플레이 이펙트 세트를 적용합니다.
각 URPGGameplayAbility 에는 FRPGGameplayEffectContainer 구조체에 대한 태그로 된 맵이 있으며, 여기에는 타깃 정보와 적용할 게임플레이 이펙트 목록이 들어갑니다.

7. 